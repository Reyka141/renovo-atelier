@import 'tailwindcss';

/**
  Нормализация блочной модели
 */
*,
::before,
::after {
    box-sizing: border-box;
}

/**
    Убираем внешние отступы body и двум другим тегам,
    у которых есть атрибут class
   */
body,
:where(blockquote, figure, fieldset):where([class]) {
    margin: 0;
}

/**
    Убираем внешние отступы вертикали нужным тегам,
    у которых есть атрибут class
   */
:where(h1, h2, h3, h4, h5, h6, p, ul, ol, dl):where([class]) {
    margin-block: 0;
}

:where(dd[class]) {
    margin-left: 0;
}

:where(fieldset[class]) {
    padding: 0;
    border: none;
}

/**
    Убираем стандартный маркер маркированному списку,
    у которого есть атрибут class
   */
:where(ul[class]) {
    list-style: none;
}

:where(address[class]) {
    font-style: normal;
}

/**
    Обнуляем вертикальные внешние отступы параграфа,
    объявляем локальную переменную для внешнего отступа вниз,
    чтобы избежать взаимодействие с более сложным селектором
   */
p {
    --paragraphMarginBottom: 24px;

    margin-block: 0;
}

/**
    Внешний отступ вниз для параграфа без атрибута class,
    который расположен не последним среди своих соседних элементов
   */
p:where(:not([class]):not(:last-child)) {
    margin-bottom: var(--paragraphMarginBottom);
}

html {
    /**
      Пригодится в большинстве ситуаций
      (когда, например, нужно будет "прижать" футер к низу сайта)
     */
    height: 100%;
    /**
      Убираем скачок интерфейса по горизонтали
      при появлении / исчезновении скроллбара
     */
    scrollbar-gutter: stable;
}

/**
    Плавный скролл
   */
html {
    scroll-behavior: smooth;
}

body {
    /**
      Пригодится в большинстве ситуаций
      (когда, например, нужно будет "прижать" футер к низу сайта)
     */
    min-height: 100%;
    /**
      Унифицированный интерлиньяж
     */
    line-height: 1.5;
}

/**
    Нормализация высоты элемента ссылки при его инспектировании в DevTools
   */
a:where([class]) {
    display: inline-flex;
}

/**
    Курсор-рука при наведении на элемент
   */
button,
label {
    cursor: pointer;
}

/**
    Приводим к единому цвету svg-элементы
    (за исключением тех, у которых уже указан
    атрибут fill со значением 'none' или начинается с 'url')
   */
:where([fill]:not([fill='none'], [fill^='url'])) {
    fill: currentColor;
}

/**
    Приводим к единому цвету svg-элементы
    (за исключением тех, у которых уже указан
    атрибут stroke со значением 'none')
   */
:where([stroke]:not([stroke='none'], [stroke^='url'])) {
    stroke: currentColor;
}

/**
    Чиним баг задержки смены цвета при взаимодействии с svg-элементами
   */
svg * {
    transition-property: fill, stroke;
}

/**
    Приведение рамок таблиц в классический 'collapse' вид
   */
:where(table) {
    border-collapse: collapse;
    border-color: currentColor;
}

/**
    Удаляем все анимации и переходы для людей,
    которые предпочитают их не использовать
   */
@media (prefers-reduced-motion: reduce) {
    *,
    ::before,
    ::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}

a,
button,
label,
input,
textarea,
select,
svg * {
    transition-duration: var(--transition-duration);
}

a {
    color: inherit;

    &:hover {
        color: var(--color-brown);
    }

    &[class] {
        text-decoration: none;
    }
}

/* Цвета  */
:root {
    --black: #212a30;
    --gray: #a4a4a4;
    --brown: #dbc7a6;
    --white: #fefefe;

    --container-width: 1440px;
    --container-padding-x: 24px;

    --transition-duration: 0.2s;
}

@theme inline {
    --color-background: var(--white);
    --color-foreground: var(--black);
    --font-secondary: var(--font-viaoda-libre);
    --font-primary: var(--font-lato);
    --container-width: var(--container-width);
    --container-padding-x: var(--container-padding-x);

    --color-white: var(--white);
    --color-black: var(--black);
    --color-gray: var(--gray);
    --color-brown: var(--brown);

    --text-button: 1.25rem;
    --text-button--line-height: 1.5rem;
    --text-button-mobile: 1rem;
    --text-button-mobile--line-height: 1.5rem;
    --text-body-mobile: 1rem;
    --text-body-mobile--line-height: 150%;
    --text-body-desktop: 1.5rem;
    --text-body-desktop--line-height: 150%;
}

body {
    background: var(--white);
    color: var(--black);

    @apply lg:text-body-desktop font-primary text-body-mobile font-normal;
}

.container {
    max-width: calc(var(--container-width) - var(--container-padding-x) * 2);
    margin-inline: auto;
    padding-inline: var(--container-padding-x);
}

/* From Uiverse.io by Cevorob */
.burger {
    position: relative;
    width: 40px;
    height: 30px;
    background: transparent;
    cursor: pointer;
    display: block;
}

.burger input {
    display: none;
}

.burger span {
    display: block;
    position: absolute;
    height: 4px;
    width: 100%;
    background: var(--color-white);
    border-radius: 9px;
    opacity: 1;
    left: 0;
    transform: rotate(0deg);
    transition: 0.25s ease-in-out;
}

.burger span:nth-of-type(1) {
    top: 0px;
    transform-origin: left center;
}

.burger span:nth-of-type(2) {
    top: 50%;
    transform: translateY(-50%);
    transform-origin: left center;
}

.burger span:nth-of-type(3) {
    top: 100%;
    transform-origin: left center;
    transform: translateY(-100%);
}

.burger input:checked ~ span:nth-of-type(1) {
    transform: rotate(45deg);
    top: 0px;
    left: 5px;
}

.burger input:checked ~ span:nth-of-type(2) {
    width: 0%;
    opacity: 0;
}

.burger input:checked ~ span:nth-of-type(3) {
    transform: rotate(-45deg);
    top: 28px;
    left: 5px;
}
